/*! For license information please see index.min.js.LICENSE.txt */
(()=>{var __webpack_modules__={"../../Main/static/checkboxbutton.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckBoxButton: () => (/* binding */ CheckBoxButton)\n/* harmony export */ });\nclass CheckBoxButton {\n  constructor(id, callback_on_check, callback_on_uncheck) {\n    var elements = document.querySelectorAll(id);\n    elements.forEach(element => {\n      element.addEventListener('click', function (event) {\n        var data = event.target.value;\n        var isChecked = event.target.checked;\n        if (isChecked) {\n          callback_on_check(data);\n        } else {\n          callback_on_uncheck(data);\n        }\n      });\n    });\n  }\n}\n\n//# sourceURL=webpack://shader-toy/../../Main/static/checkboxbutton.js?\n}")},"../../Main/static/inputvaluebutton.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InputValueButton: () => (/* binding */ InputValueButton)\n/* harmony export */ });\nclass InputValueButton {\n  constructor(id, callback) {\n    this.elements = document.querySelectorAll(id);\n    this.elements.forEach(element => {\n      element.addEventListener('change', function (event) {\n        var data = event.target.value;\n        var field = event.target.dataset.field;\n        callback(data, field);\n      });\n    });\n  }\n  update(data) {\n    for (var i = 0; i < this.elements.length; i++) {\n      this.elements[i].value = data[i];\n    }\n  }\n}\n\n//# sourceURL=webpack://shader-toy/../../Main/static/inputvaluebutton.js?\n}")},"../../Main/static/radiobutton.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColoredRadioButton: () => (/* binding */ ColoredRadioButton),\n/* harmony export */   RadioButton: () => (/* binding */ RadioButton)\n/* harmony export */ });\n/*\n *\tSimple radio button checker\n * */\nclass RadioButton {\n  constructor(id, callback, default_to_check) {\n    var def_i = default_to_check || 0;\n    this.elements = document.querySelectorAll(id);\n    this.elements[def_i].checked = true;\n    this.elements.forEach(element => {\n      element.addEventListener('click', function (event) {\n        var data = event.target.value;\n        callback(data);\n      });\n    });\n  }\n  update(default_to_check) {\n    this.elements[default_to_check].checked = true;\n  }\n}\n\n/* \n * Create radio button via colored icons\n * \n * */\nclass ColoredRadioButton {\n  constructor(id, btn, selected_color, not_selected_color, callback, callbackArgs) {\n    this.btn = btn;\n    this.selected_color = selected_color;\n    this.not_selected_color = not_selected_color;\n    this.callback = callback || function () {};\n    this.callbackArgs = callbackArgs || this.btn;\n    this.btns = document.querySelectorAll(id);\n  }\n  select() {\n    this.btns.forEach(item => {\n      item.style.backgroundColor = this.not_selected_color;\n    });\n    this.btn.style.backgroundColor = this.selected_color;\n    this.callback(this.callbackArgs);\n  }\n}\n\n//# sourceURL=webpack://shader-toy/../../Main/static/radiobutton.js?\n}")},"./static/ShaderToy/js/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "./static/ShaderToy/js/math.js");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_math_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _shader_toy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shader_toy.js */ "./static/ShaderToy/js/shader_toy.js");\n\n\n\n//# sourceURL=webpack://shader-toy/./static/ShaderToy/js/index.js?\n}')},"./static/ShaderToy/js/math.js":()=>{eval("{var math = {\n  projection: function (width, height) {\n    // Note: This matrix flips the Y axis so that 0 is at the top.\n    return [2 / width, 0, 0, 0, -2 / height, 0, -1, 1, 1];\n  },\n  perspective: function (fieldOfViewInRadians, aspect, near, far) {\n    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);\n    var rangeInv = 1.0 / (near - far);\n    return [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (near + far) * rangeInv, -1, 0, 0, near * far * rangeInv * 2, 0];\n  },\n  orthographic: function (left, right, bottom, top, near, far) {\n    return [2 / (right - left), 0, 0, 0, 0, 2 / (top - bottom), 0, 0, 0, 0, 2 / (near - far), 0, (left + right) / (left - right), (bottom + top) / (bottom - top), (near + far) / (near - far), 1];\n  },\n  identity: function () {\n    return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  },\n  identity3d: function () {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  },\n  inverse: function (m) {\n    var m00 = m[0 * 4 + 0];\n    var m01 = m[0 * 4 + 1];\n    var m02 = m[0 * 4 + 2];\n    var m03 = m[0 * 4 + 3];\n    var m10 = m[1 * 4 + 0];\n    var m11 = m[1 * 4 + 1];\n    var m12 = m[1 * 4 + 2];\n    var m13 = m[1 * 4 + 3];\n    var m20 = m[2 * 4 + 0];\n    var m21 = m[2 * 4 + 1];\n    var m22 = m[2 * 4 + 2];\n    var m23 = m[2 * 4 + 3];\n    var m30 = m[3 * 4 + 0];\n    var m31 = m[3 * 4 + 1];\n    var m32 = m[3 * 4 + 2];\n    var m33 = m[3 * 4 + 3];\n    var tmp_0 = m22 * m33;\n    var tmp_1 = m32 * m23;\n    var tmp_2 = m12 * m33;\n    var tmp_3 = m32 * m13;\n    var tmp_4 = m12 * m23;\n    var tmp_5 = m22 * m13;\n    var tmp_6 = m02 * m33;\n    var tmp_7 = m32 * m03;\n    var tmp_8 = m02 * m23;\n    var tmp_9 = m22 * m03;\n    var tmp_10 = m02 * m13;\n    var tmp_11 = m12 * m03;\n    var tmp_12 = m20 * m31;\n    var tmp_13 = m30 * m21;\n    var tmp_14 = m10 * m31;\n    var tmp_15 = m30 * m11;\n    var tmp_16 = m10 * m21;\n    var tmp_17 = m20 * m11;\n    var tmp_18 = m00 * m31;\n    var tmp_19 = m30 * m01;\n    var tmp_20 = m00 * m21;\n    var tmp_21 = m20 * m01;\n    var tmp_22 = m00 * m11;\n    var tmp_23 = m10 * m01;\n    var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n    var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n    var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n    var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n    return [d * t0, d * t1, d * t2, d * t3, d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)), d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)), d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)), d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)), d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)), d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)), d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)), d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)), d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)), d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)), d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)), d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))];\n  },\n  multiply: function (a, b) {\n    var a00 = a[0 * 3 + 0];\n    var a01 = a[0 * 3 + 1];\n    var a02 = a[0 * 3 + 2];\n    var a10 = a[1 * 3 + 0];\n    var a11 = a[1 * 3 + 1];\n    var a12 = a[1 * 3 + 2];\n    var a20 = a[2 * 3 + 0];\n    var a21 = a[2 * 3 + 1];\n    var a22 = a[2 * 3 + 2];\n    var b00 = b[0 * 3 + 0];\n    var b01 = b[0 * 3 + 1];\n    var b02 = b[0 * 3 + 2];\n    var b10 = b[1 * 3 + 0];\n    var b11 = b[1 * 3 + 1];\n    var b12 = b[1 * 3 + 2];\n    var b20 = b[2 * 3 + 0];\n    var b21 = b[2 * 3 + 1];\n    var b22 = b[2 * 3 + 2];\n    return [b00 * a00 + b01 * a10 + b02 * a20, b00 * a01 + b01 * a11 + b02 * a21, b00 * a02 + b01 * a12 + b02 * a22, b10 * a00 + b11 * a10 + b12 * a20, b10 * a01 + b11 * a11 + b12 * a21, b10 * a02 + b11 * a12 + b12 * a22, b20 * a00 + b21 * a10 + b22 * a20, b20 * a01 + b21 * a11 + b22 * a21, b20 * a02 + b21 * a12 + b22 * a22];\n  },\n  multiply4x4: function (a, b) {\n    var a00 = a[0 * 4 + 0];\n    var a01 = a[0 * 4 + 1];\n    var a02 = a[0 * 4 + 2];\n    var a03 = a[0 * 4 + 3];\n    var a10 = a[1 * 4 + 0];\n    var a11 = a[1 * 4 + 1];\n    var a12 = a[1 * 4 + 2];\n    var a13 = a[1 * 4 + 3];\n    var a20 = a[2 * 4 + 0];\n    var a21 = a[2 * 4 + 1];\n    var a22 = a[2 * 4 + 2];\n    var a23 = a[2 * 4 + 3];\n    var a30 = a[3 * 4 + 0];\n    var a31 = a[3 * 4 + 1];\n    var a32 = a[3 * 4 + 2];\n    var a33 = a[3 * 4 + 3];\n    var b00 = b[0 * 4 + 0];\n    var b01 = b[0 * 4 + 1];\n    var b02 = b[0 * 4 + 2];\n    var b03 = b[0 * 4 + 3];\n    var b10 = b[1 * 4 + 0];\n    var b11 = b[1 * 4 + 1];\n    var b12 = b[1 * 4 + 2];\n    var b13 = b[1 * 4 + 3];\n    var b20 = b[2 * 4 + 0];\n    var b21 = b[2 * 4 + 1];\n    var b22 = b[2 * 4 + 2];\n    var b23 = b[2 * 4 + 3];\n    var b30 = b[3 * 4 + 0];\n    var b31 = b[3 * 4 + 1];\n    var b32 = b[3 * 4 + 2];\n    var b33 = b[3 * 4 + 3];\n    return [b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30, b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31, b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32, b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33, b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30, b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31, b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32, b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33, b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30, b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31, b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32, b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33, b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30, b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31, b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32, b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33];\n  },\n  multiply4x42: function (a, b, dst) {\n    var a00 = a[0 * 4 + 0];\n    var a01 = a[0 * 4 + 1];\n    var a02 = a[0 * 4 + 2];\n    var a03 = a[0 * 4 + 3];\n    var a10 = a[1 * 4 + 0];\n    var a11 = a[1 * 4 + 1];\n    var a12 = a[1 * 4 + 2];\n    var a13 = a[1 * 4 + 3];\n    var a20 = a[2 * 4 + 0];\n    var a21 = a[2 * 4 + 1];\n    var a22 = a[2 * 4 + 2];\n    var a23 = a[2 * 4 + 3];\n    var a30 = a[3 * 4 + 0];\n    var a31 = a[3 * 4 + 1];\n    var a32 = a[3 * 4 + 2];\n    var a33 = a[3 * 4 + 3];\n    var b00 = b[0 * 4 + 0];\n    var b01 = b[0 * 4 + 1];\n    var b02 = b[0 * 4 + 2];\n    var b03 = b[0 * 4 + 3];\n    var b10 = b[1 * 4 + 0];\n    var b11 = b[1 * 4 + 1];\n    var b12 = b[1 * 4 + 2];\n    var b13 = b[1 * 4 + 3];\n    var b20 = b[2 * 4 + 0];\n    var b21 = b[2 * 4 + 1];\n    var b22 = b[2 * 4 + 2];\n    var b23 = b[2 * 4 + 3];\n    var b30 = b[3 * 4 + 0];\n    var b31 = b[3 * 4 + 1];\n    var b32 = b[3 * 4 + 2];\n    var b33 = b[3 * 4 + 3];\n    dst = dst || new MatType(16);\n    dst[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n    dst[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n    dst[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n    dst[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n    dst[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n    dst[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n    dst[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n    dst[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n    dst[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n    dst[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n    dst[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n    dst[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n    dst[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n    dst[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n    dst[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n    dst[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n    return dst;\n  },\n  translation: function (tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n  translation3d: function (tx, ty, tz) {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1];\n  },\n  translation3d2: function (tx, ty, tz, dst) {\n    dst = dst || new MatType(16);\n    dst[0] = 1;\n    dst[1] = 0;\n    dst[2] = 0;\n    dst[3] = 0;\n    dst[4] = 0;\n    dst[5] = 1;\n    dst[6] = 0;\n    dst[7] = 0;\n    dst[8] = 0;\n    dst[9] = 0;\n    dst[10] = 1;\n    dst[11] = 0;\n    dst[12] = tx;\n    dst[13] = ty;\n    dst[14] = tz;\n    dst[15] = 1;\n    return dst;\n  },\n  rotation: function (angleInRadians) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n  xRotation: function (angleInRadians) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1];\n  },\n  yRotation: function (angleInRadians) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1];\n  },\n  zRotation: function (angleInRadians) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  },\n  scaling: function (sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n  scaling3d: function (sx, sy, sz) {\n    return [sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1];\n  },\n  translate: function (m, tx, ty, tz) {\n    return math.multiply4x4(m, math.translation3d(tx, ty, tz));\n  },\n  xRotate: function (m, angleInRadians) {\n    return math.multiply4x4(m, math.xRotation(angleInRadians));\n  },\n  yRotate: function (m, angleInRadians) {\n    return math.multiply4x4(m, math.yRotation(angleInRadians));\n  },\n  zRotate: function (m, angleInRadians) {\n    return math.multiply4x4(m, math.zRotation(angleInRadians));\n  },\n  xRotate2: function (m, angleInRadians, dst) {\n    return math.multiply4x42(m, math.xRotation(angleInRadians), dst);\n  },\n  yRotation2: function (angleInRadians, dst) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1];\n  },\n  zRotation2: function (angleInRadians, dst) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  },\n  scale: function (m, sx, sy, sz) {\n    return math.multiply4x4(m, math.scaling3d(sx, sy, sz));\n  },\n  vectorMultiply: function (v, m) {\n    var dst = [];\n    for (var i = 0; i < 4; ++i) {\n      dst[i] = 0.0;\n      for (var j = 0; j < 4; ++j) {\n        dst[i] += v[j] * m[j * 4 + i];\n      }\n    }\n    return dst;\n  },\n  transformVector: function (m, v, dst) {\n    dst = dst || new Float32Array(4);\n    for (var i = 0; i < 4; ++i) {\n      dst[i] = 0.0;\n      for (var j = 0; j < 4; ++j) {\n        dst[i] += v[j] * m[j * 4 + i];\n      }\n    }\n    return dst;\n  },\n  transpose: function (m) {\n    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];\n  },\n  // Cross product of 2 vectors\n  cross: function (a, b) {\n    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n  },\n  subtractVectors: function (a, b) {\n    return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n  },\n  normalize: function (v) {\n    var length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n    // проверяем, что мы не делим на 0\n    if (length > 0.00001) {\n      return [v[0] / length, v[1] / length, v[2] / length];\n    } else {\n      return [0, 0, 0];\n    }\n  },\n  lookAt: function (cameraPosition, target, up) {\n    var zAxis = math.normalize(math.subtractVectors(cameraPosition, target));\n    var xAxis = math.normalize(math.cross(up, zAxis));\n    var yAxis = math.normalize(math.cross(zAxis, xAxis));\n    return [xAxis[0], xAxis[1], xAxis[2], 0, yAxis[0], yAxis[1], yAxis[2], 0, zAxis[0], zAxis[1], zAxis[2], 0, cameraPosition[0], cameraPosition[1], cameraPosition[2], 1];\n  }\n};\n\n//# sourceURL=webpack://shader-toy/./static/ShaderToy/js/math.js?\n}")},"./static/ShaderToy/js/shader_toy.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Main_static_radiobutton_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../Main/static/radiobutton.js */ "../../Main/static/radiobutton.js");\n/* harmony import */ var _Main_static_checkboxbutton_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../Main/static/checkboxbutton.js */ "../../Main/static/checkboxbutton.js");\n/* harmony import */ var _Main_static_inputvaluebutton_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../Main/static/inputvaluebutton.js */ "../../Main/static/inputvaluebutton.js");\n\n\n\n/* Что добавить потом\n *\t1) Добавить в настройки холста версию WebGL 1 или 2\n *\t2) Обратную связь при сохранении\n *\t3) Обратную связь при ошибках\n *\t4) Возможность давать имена сохранениям\n *\t5) Привязать клавиатуру к некоторым кнопкам\n * */\n\n/* \n * Генерирует уникальные идентификаторы\n * \n * */\nfunction GenerateUID() {\n  return Math.random().toString(16).slice(2);\n}\n\n/*\n *\tКоллбэк для обновления текста в зависимости от\n *\tтого происходит отрисовка или нет.\n *\n * */\nfunction SetToyStatus(source) {\n  var status = source.dataset.setedStatus;\n  var to_insert = document.getElementById(\'render-status\');\n  to_insert.innerText = status;\n}\n\n/*\n *\tПрисваиваем кнопке остановки рендеринга соответствующую ф-ию\n *\tДанная функция останавливает запросы фреймов от браузера\n * */\nvar pause_shader_button = document.getElementById("pause_shader");\npause_shader_button.addEventListener(\'click\', function () {\n  pause_render.select();\n  window.cancelAnimationFrame(toy.request_animation_id);\n});\nvar pause_render = new _Main_static_radiobutton_js__WEBPACK_IMPORTED_MODULE_0__.ColoredRadioButton(\'.switch_action\', pause_shader_button, "#f0bb29", "#fff", SetToyStatus, pause_shader_button);\n\n/*\n *\tПрисваиваем кнопке продолжения рендеринга соответствующую ф-ию\n *\tДанная функция запрашивает новый фрейм от браузера.\n * */\nvar resume_shader_button = document.getElementById("resume_shader");\nresume_shader_button.addEventListener(\'click\', function () {\n  resume_render.select();\n  toy.request_animation_id = window.requestAnimationFrame(time => toy.update(time, toy));\n});\nvar resume_render = new _Main_static_radiobutton_js__WEBPACK_IMPORTED_MODULE_0__.ColoredRadioButton(\'.switch_action\', resume_shader_button, "#84a8e3", "#fff", SetToyStatus, resume_shader_button);\n\n/*\n *\tПрисваиваем кнопке перезагрузки шейдера соответствующую ф-ию\n *\tДанная функция обновляет все юниформы и аттрибуты, а вместе с\n *\tними и UI элементы вместе с геометрией.\n * */\nvar reload_shader_button = document.getElementById("reload_shader");\nreload_shader_button.addEventListener(\'click\', function () {\n  toy.clearLog();\n  toy.updateShaderProgram();\n  toy.updateUIElements();\n  toy.updateGeometry();\n});\n\n/*\n *\tВыполняет сохранение шейдера в текущую сессию\n * */\nfunction SaveShaderAction() {\n  // Генерируем уникальное имя(дату) и id \n  var cd = new Date();\n  var date = cd.getDay() + "." + cd.getMonth() + "." + cd.getFullYear() + "-" + cd.getHours() + ":" + cd.getMinutes() + ":" + cd.getSeconds() + ":" + cd.getMilliseconds();\n  var id = GenerateUID();\n  // Собираем все буферы и размеры в один большой блоб информации для передачи\n  var buffers = {\n    "buffers": []\n  };\n  var sizes = {\n    "sizes": []\n  };\n  for (var i = 0; i < toy.ui_elements.length; i++) {\n    var is_raw = false;\n    if (toy.ui_elements[i].buffer.constructor === Float32Array) {\n      is_raw = true;\n    }\n    buffers["buffers"].push({\n      "data": toy.ui_elements[i].buffer,\n      "is_raw": is_raw\n    });\n    sizes["sizes"].push({\n      "data": toy.ui_elements[i].size\n    });\n  }\n  $.ajax({\n    type: "POST",\n    url: "save_shader/",\n    data: {\n      \'name\': date,\n      \'shader_id\': id,\n      \'fragment_src\': toy.fragment_editor.getValue(),\n      \'vertex_src\': toy.vertex_editor.getValue(),\n      \'default_geometry_data_indx\': toy.default_geometry_data_indx,\n      \'render_mode\': toy.render_mode,\n      \'bg\': JSON.stringify(toy.bg),\n      \'buffers\': JSON.stringify(buffers),\n      \'sizes\': JSON.stringify(sizes)\n    },\n    headers: {\n      \'X-CSRFToken\': csrftoken\n    },\n    mode: \'same-origin\',\n    // Do not send CSRF token to another domain.\n    success: function (result) {\n      var el_insert_to = document.getElementById(\'tab_body-8\');\n      el_insert_to.insertAdjacentHTML(\'beforeend\', result);\n      document.getElementById(\'delete-\' + id).addEventListener(\'click\', RemoveShaderAction);\n      document.getElementById(\'upload-\' + id).addEventListener(\'click\', UploadShaderAction);\n    },\n    error: function (jqXHR, textStatus, errorThrown) {}\n  });\n}\nvar save_shader_button = document.getElementById("save_shader");\nsave_shader_button.addEventListener(\'click\', SaveShaderAction);\n\n/*\n *\tВыполняет удаление сохранённого шейдера из текущей сессии\n * */\nfunction RemoveShaderAction(event) {\n  var id = event.target.attributes.value.nodeValue;\n  // Удаляем элемент со страницы\n  var record = document.getElementById(id);\n  record.remove();\n  // Делаем запрос на сервер для удаления шейдера\n  $.ajax({\n    type: \'POST\',\n    url: \'remove_shader/\',\n    data: {\n      \'shader_id\': id\n    },\n    headers: {\n      \'X-CSRFToken\': csrftoken\n    },\n    mode: \'same-origin\',\n    success: function (result) {},\n    error: function (jqXHR, textStatus, errorThrown) {}\n  });\n}\n// Присваиваем функцию удаления шейдера из сессии, каждой найденой кнопки удаления \nvar remove_shader_buttons = document.querySelectorAll(\'.shader_remove_action\');\nremove_shader_buttons.forEach(el => {\n  el.addEventListener(\'click\', RemoveShaderAction);\n});\n\n/*\n *\tВыполняет загрузку сохранённого шейдера из текущей сессии\n * */\nfunction UploadShaderAction(event) {\n  var id = event.target.attributes.value.nodeValue;\n  $.ajax({\n    type: \'POST\',\n    url: \'get_shader/\',\n    data: {\n      \'shader_id\': id\n    },\n    headers: {\n      \'X-CSRFToken\': csrftoken\n    },\n    mode: \'same-origin\',\n    success: function (result) {\n      toy.fragment_editor.setValue(result.fragment_src);\n      toy.vertex_editor.setValue(result.vertex_src);\n      toy.clearLog();\n      toy.updateShaderProgram();\n      toy.updateUIElements();\n      toy.updateGeometry();\n      toy.default_geometry_data_indx = result.dgd_indx;\n      toy.render_mode = parseInt(result.render_mode);\n      var bg = JSON.parse(result.bg);\n      toy.bg_color_btn.update(bg);\n      toy.updateBgColor(bg[0], \'r\');\n      toy.updateBgColor(bg[1], \'g\');\n      toy.updateBgColor(bg[2], \'b\');\n      toy.updateBgColor(bg[3], \'a\');\n      var buffers = JSON.parse(result.buffers);\n      var sizes = JSON.parse(result.sizes);\n      for (var i = 0; i < toy.ui_elements.length; i++) {\n        if (buffers["buffers"][i]["is_raw"]) {\n          var array = [];\n          for (value in buffers["buffers"][i]["data"]) {\n            array.push(buffers["buffers"][i]["data"][value]);\n          }\n          toy.ui_elements[i].buffer = new Float32Array(array);\n        } else {\n          toy.ui_elements[i].buffer = buffers["buffers"][i]["data"];\n        }\n        toy.ui_elements[i].size = sizes["sizes"][i]["data"];\n      }\n      toy.updateUIElements();\n      toy.updateGeometry();\n    },\n    error: function (jqXHR, textStatus, errorThrown) {}\n  });\n}\n// Присваиваем функцию загрузки шейдера из сессии каждой найденой кнопке загрузки\nvar upload_shader_buttons = document.querySelectorAll(\'.shader_upload_action\');\nupload_shader_buttons.forEach(el => {\n  el.addEventListener(\'click\', UploadShaderAction);\n});\n\n/*\n *\tЗагружает сохранённые шейдеры из сессии \n *\t,создаёт соответствующие UI элементы\n *\t,присваивает им соответствующие коллбэки\n * */\nfunction LoadSaves() {\n  $.ajax({\n    type: \'POST\',\n    url: "load_shader/",\n    headers: {\n      \'X-CSRFToken\': csrftoken\n    },\n    mode: \'same-origin\',\n    // Do not send CSRF token to another domain.\n    success: function (result) {\n      var el_insert_to = document.getElementById(\'tab_body-8\');\n      el_insert_to.insertAdjacentHTML(\'beforeend\', result);\n      var saves = el_insert_to.querySelectorAll(\'.save_shader\');\n      saves.forEach(save => {\n        document.getElementById(\'delete-\' + save.id).addEventListener(\'click\', RemoveShaderAction);\n        document.getElementById(\'upload-\' + save.id).addEventListener(\'click\', UploadShaderAction);\n      });\n    },\n    error: function (jqXHR, textStatus, errorThrown) {}\n  });\n}\nvar saves_tab = document.getElementById(\'tab_button_for_save\');\nsaves_tab.addEventListener(\'click\', LoadSaves, {\n  once: true\n});\n\n/**/\nfunction LoadLibrary() {\n  $.ajax({\n    type: \'POST\',\n    url: "load_library/",\n    headers: {\n      \'X-CSRFToken\': csrftoken\n    },\n    mode: \'same-origin\',\n    // Do not send CSRF token to another domain.\n    success: function (result) {\n      var el_insert_to = document.getElementById(\'tab_body-5\');\n      el_insert_to.insertAdjacentHTML(\'beforeend\', result);\n      var saves = el_insert_to.querySelectorAll(\'.save_shader\');\n      saves.forEach(save => {\n        document.getElementById(\'delete-\' + save.id).remove();\n        document.getElementById(\'upload-\' + save.id).addEventListener(\'click\', UploadShaderAction);\n      });\n    },\n    error: function (jqXHR, textStatus, errorThrown) {}\n  });\n}\nvar upload_library_tab = document.getElementById(\'tab_button_for_lib\');\nupload_library_tab.addEventListener(\'click\', LoadLibrary, {\n  once: true\n});\n\n/*\n * Возвращает шейдер к состоянию по умолчанию, то есть при инициализации\n *\n * */\nvar toDefault_shader_button = document.getElementById("toDefault_shader");\ntoDefault_shader_button.addEventListener(\'click\', function () {\n  toy.render_mode = toy.gl.TRIANGLES;\n  toy.render_mode_btn.update(0);\n  toy.bg = [1.0, 1.0, 1.0, 1.0];\n  toy.bg_color_btn.update(toy.bg);\n  resume_render.select();\n  toy.setFromDefaultsShaderSrouceCode();\n  toy.updateShaderProgram();\n  toy.setFromDefaultsUIElements();\n  toy.updateGeometry();\n});\n\n/*\n * Конвертирует входящую строку цифр в вектор\n * Также конвертирует получаемый размер и текущий индекс в int \n * */\nfunction handleRawData(element, data) {\n  switch (element.tagName) {\n    case "INPUT":\n      if (element.type == \'number\') {\n        this.size = parseInt(data);\n        toy.updateShaderProgram();\n        toy.updateUIElements();\n        this.loc = toy.gl.getAttribLocation(toy.program, this.name);\n        toy.updateGeometry();\n      } else {\n        toy.default_geometry_data_indx = parseInt(data);\n      }\n      break;\n    case "TEXTAREA":\n      this.buffer = new Float32Array(data.split(\',\').map(item => {\n        return parseFloat(item);\n      }));\n      toy.updateShaderProgram();\n      toy.updateUIElements();\n      this.loc = toy.gl.getAttribLocation(toy.program, this.name);\n      toy.updateGeometry();\n      break;\n  }\n}\n\n/*\n * Конвертирует входящую строку в тип float\n * и изменяет соответствующий буфер\n * */\nfunction handleFloat(element, data) {\n  this.buffer = parseFloat(data);\n}\n\n/*\n * Конвертирует входящую строку в тип int\n * и изменяет соответствующий буфер\n * */\nfunction handleInt(element, data) {\n  this.buffer = parseInt(data);\n}\n\n/*\n * Конвертирует входящую строку в тип bool\n * и изменяет соответствующий буфер\n * */\nfunction handleBool(element, data) {\n  this.buffer = parseInt(data);\n}\n\n/*\n * Конвертирует входящую строку в тип float\n * и изменяет соответствующую ячейку в векторе\n * */\nfunction handleFloatVector(element, data) {\n  var indx = parseInt(element.dataset.vecIndx);\n  this.buffer[indx] = parseFloat(data);\n}\n\n/*\n * Конвертирует входящую строку в тип bool\n * и изменяет соответствующую ячейку в векторе\n * */\nfunction handleBoolVector(element, data) {\n  var indx = parseInt(element.dataset.vecIndx);\n  this.buffer[indx] = parseInt(data);\n}\n\n/*\n * Конвертирует входящую строку в тип int\n * и изменяет соответствующую ячейку в векторе\n * */\nfunction handleIntVector(element, data) {\n  var indx = parseInt(element.dataset.vecIndx);\n  this.buffer[indx] = parseInt(data);\n}\n\n/*\n * Конвертирует входящую строку в тип float\n * и изменяет соответствующую ячейку в матрице\n * */\nfunction handleMatrix(element, data) {\n  var indx = parseInt(element.dataset.vecIndx);\n  this.buffer[indx] = parseFloat(data);\n}\n\n/*\n *\tИзменяет размер холста соответственно ширине дисплея\n * */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  const width = canvas.clientWidth * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\n/*\n *\tДанная функция следит за тем, что когда появится новое поле для ввода данных\n *\tона присвоет ему соответствующий хендлер для изменения данных шейдера\n * */\nfunction onInputChange() {\n  function setUpHandler(elements) {\n    elements.forEach(el => {\n      var elId = el.dataset.uiElementId;\n      el.addEventListener(\'change\', event => {\n        toy.ui_elements[elId].handler(event.target, event.target.value);\n      });\n    });\n  }\n\n  // Когда появится новый элемент ввода на странице данная функция зарегистрирует это\n  function WaitUIElementsToAppear(mutationList, observer) {\n    for (const mutation of mutationList) {\n      if (mutation.addedNodes.length > 0) {\n        const UIElements = mutation.addedNodes[0].querySelectorAll(".input_el");\n        setUpHandler(UIElements);\n      }\n    }\n  }\n  ;\n  const observedElements = document.querySelectorAll(".toObserve");\n  const config = {\n    childList: true\n  };\n  const observer = new MutationObserver(WaitUIElementsToAppear);\n  observedElements.forEach(el => {\n    observer.observe(el, config);\n  });\n  // Сначала ищем уже присутствующие элементы ввода на странице\n  const UIElements = document.querySelectorAll(".input_el");\n  setUpHandler(UIElements);\n}\ndocument.addEventListener("DOMContentLoaded", onInputChange);\n\n/*\n *\tДанная функция обновляет данные об позиции мыши относительно холста\n * */\nfunction UpdateMousePos(event) {\n  var rect = event.target.getBoundingClientRect();\n  var x = event.clientX - rect.left; //x position within the element.\n  var y = event.clientY - rect.top; //y position within the element.\n  toy.mouse_pos[0] = x;\n  toy.mouse_pos[1] = y;\n}\ndocument.getElementById(\'canvas\').onmousemove = UpdateMousePos;\n\n/*\n * Класс которые регулирует, обновляет и контролирует работу ShaderToy инструмента\n *\n * */\nclass ShaderToy {\n  constructor() {\n    window.onerror = this.log;\n    // Другие константы\n    this.start = 0;\n    this.default_geometry_data_indx = 0;\n    this.mouse_pos = [0, 0];\n    this.render_mode_btn = new _Main_static_radiobutton_js__WEBPACK_IMPORTED_MODULE_0__.RadioButton(\'.render_mode\', this.updateRenderMode);\n    this.pipeline_work_btn = new _Main_static_checkboxbutton_js__WEBPACK_IMPORTED_MODULE_1__.CheckBoxButton(\'.pipeline_work\', this.updatePipelineCheck, this.updatePipelineUnCheck);\n    this.bg_color_btn = new _Main_static_inputvaluebutton_js__WEBPACK_IMPORTED_MODULE_2__.InputValueButton(\'.bg_color\', this.updateBgColor);\n    // Получаем объекты редактора от Ace\n    this.fragment_editor = ace.edit("fragment_editor");\n    this.fragment_editor.session.setMode("ace/mode/glsl");\n    this.vertex_editor = ace.edit("vertex_editor");\n    this.vertex_editor.session.setMode("ace/mode/glsl");\n\n    /* Получаем WebGL2 контекст. Инициализируем WebGL2 */\n    this.canvas = document.querySelector("#canvas");\n    this.gl = this.canvas.getContext("webgl2");\n    // Устанавливаем режим отрисовки по умолчанию\n    this.render_mode = this.gl.TRIANGLES;\n    this.bg = [1.0, 1.0, 1.0, 1.0];\n    if (!this.gl) {\n      this.log("OpenGl is not avaiable");\n    }\n    resume_render.select();\n    /* Создаём шейдер */\n    this.setFromDefaultsShaderSrouceCode();\n    this.updateShaderProgram();\n    this.setFromDefaultsUIElements();\n    this.updateGeometry();\n  }\n  setFromDefaultsShaderSrouceCode() {\n    /* Создаём шейдер */\n    // Получаем путь к исходникам шейдера. \n    this.vertexShaderPath = this.canvas.dataset.vertexShader;\n    this.fragmentShaderPath = this.canvas.dataset.fragmentShader;\n    // Получаем содержание шейдера.\n    this.vertex_editor.setValue(this.readTextFile(this.vertexShaderPath));\n    this.fragment_editor.setValue(this.readTextFile(this.fragmentShaderPath));\n  }\n  updateShaderProgram() {\n    // Переменные где будет хранится код для создания шейдерной программы\n    this.fragment_source_code = this.fragment_editor.getValue();\n    this.vertex_source_code = this.vertex_editor.getValue();\n    // Создаём программу на GPU. То есть шейдер.\n    this.vertexShader = this.createShader(this.gl, this.gl.VERTEX_SHADER, this.vertex_source_code);\n    this.fragmentShader = this.createShader(this.gl, this.gl.FRAGMENT_SHADER, this.fragment_source_code);\n    this.program = this.createProgram(this.gl, this.vertexShader, this.fragmentShader);\n  }\n  setFromDefaultsUIElements() {\n    this.uTimeLoc = this.gl.getUniformLocation(this.program, \'u_time\');\n    this.uResolutionLoc = this.gl.getUniformLocation(this.program, \'u_resolution\');\n    this.uMousePosLoc = this.gl.getUniformLocation(this.program, \'u_mouse\');\n    this.uniforms = this.getUniforms;\n    this.attributes = this.getAttributes;\n    this.ui_elements = [];\n\n    /* Создаём соответствующие UI элементы */\n    this.clearwebUIElements();\n    this.clearbuffUIElements();\n    for (var i = 0; i < this.attributes.length; i++) {\n      this.setUIElement(this.attributes[i]);\n    }\n    for (var i = 0; i < this.uniforms.length; i++) {\n      this.setUIElement(this.uniforms[i]);\n    }\n    for (var i = 0; i < this.ui_elements.length; i++) {\n      this.setbufferUIElement(this.ui_elements[i]);\n      this.setwebUIElement(this.ui_elements[i]);\n      this.setcallbacksUIElement(this.ui_elements[i]);\n    }\n  }\n  updateUIElements() {\n    this.uTimeLoc = this.gl.getUniformLocation(this.program, \'u_time\');\n    this.uResolutionLoc = this.gl.getUniformLocation(this.program, \'u_resolution\');\n    this.uMousePosLoc = this.gl.getUniformLocation(this.program, \'u_mouse\');\n    this.uniforms = this.getUniforms;\n    this.attributes = this.getAttributes;\n    var res_elements = [];\n    var curr = 0;\n    this.clearwebUIElements();\n    for (; curr < this.attributes.length; curr++) {\n      res_elements.push({\n        buffer: null,\n        name: this.attributes[curr].name,\n        loc: this.attributes[curr].loc,\n        type_data: this.attributes[curr].type\n      });\n      // Присваиваем дефолтные буферы и коллбэки\n      this.setbufferUIElement(res_elements[curr]);\n      this.setcallbacksUIElement(res_elements[curr]);\n      var id = res_elements.length - 1;\n      res_elements[curr].id = id;\n    }\n    for (var i = 0; i < this.uniforms.length; i++) {\n      res_elements.push({\n        buffer: null,\n        name: this.uniforms[i].name,\n        loc: this.uniforms[i].loc,\n        type_data: this.uniforms[i].type\n      });\n      // Присваиваем дефолтные буферы и коллбэки\n      this.setbufferUIElement(res_elements[curr]);\n      this.setcallbacksUIElement(res_elements[curr]);\n      var id = res_elements.length - 1;\n      res_elements[curr].id = id;\n      curr += 1;\n    }\n\n    // Переносим уже существующие элементы интерфейса\n    for (var i = 0; i < res_elements.length; i++) {\n      for (var j = 0; j < this.ui_elements.length; j++) {\n        if (res_elements[i].name == this.ui_elements[j].name) {\n          res_elements[i].buffer = this.ui_elements[j].buffer;\n          res_elements[i].update = this.ui_elements[j].update;\n          res_elements[i].handler = this.ui_elements[j].handler;\n          res_elements[i].size = this.ui_elements[j].size;\n          break;\n        }\n      }\n    }\n    this.ui_elements = res_elements;\n    for (var i = 0; i < this.ui_elements.length; i++) {\n      this.setwebUIElement(this.ui_elements[i]);\n      this.setcallbacksUIElement(this.ui_elements[i]);\n    }\n  }\n  updateGeometry() {\n    /* Создание объекта */\n    // Создаём VAO\n    this.vao = this.gl.createVertexArray();\n    // Устанавливаем его как текущего в использовании\n    this.gl.bindVertexArray(this.vao);\n    for (var i = 0; i < this.attributes.length; i++) {\n      // Создаём буферdfsdf\n      var buffer = this.gl.createBuffer();\n      // Связываем созданный буфер с ...\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, this.ui_elements[i].buffer, this.gl.STATIC_DRAW);\n      // Включаем атрибут\n      this.gl.enableVertexAttribArray(this.ui_elements[i].loc);\n      // Обозначаем то как читать данные из созданного буфера\n      var size = this.ui_elements[i].size; // Длина одного элемента в буфере\n      var type = this.gl.FLOAT; // Тип данных в элементе буфера \n      var normalize = false; // При использовании с gl.FLOAT не имеет эффекта\n      var stride = 0; // Шаг к следующему элементу в буфере вычисляется: sizeof(type) * size\n      var offset = 0; // Откуда начать читать буфер\n      this.gl.vertexAttribPointer(this.ui_elements[i].loc, size, type, normalize, stride, offset);\n    }\n  }\n  /*\n   * Обновляет текущий режим отрисовки в WebGL2\n   * */\n  updateRenderMode(data) {\n    switch (data) {\n      case \'TRIANGLES\':\n        toy.render_mode = toy.gl.TRIANGLES;\n        break;\n      case \'POINTS\':\n        toy.render_mode = toy.gl.POINTS;\n        break;\n      case \'LINES\':\n        toy.render_mode = toy.gl.LINES;\n        break;\n      case \'LINE_LOOP\':\n        toy.render_mode = toy.gl.LINE_LOOP;\n        break;\n      case \'LINE_STRIP\':\n        toy.render_mode = toy.gl.LINE_STRIP;\n        break;\n      case \'TRIANGLE_STRIP\':\n        toy.render_mode = toy.gl.TRIANGLE_STRIP;\n        break;\n      case \'TRIANGLE_FAN\':\n        toy.render_mode = toy.gl.TRIANGLE_FAN;\n        break;\n    }\n  }\n\n  /*\n   * Деактивирует различные режимы работы конвеера отрисовки в WebGL2\n   * */\n  updatePipelineUnCheck(data) {\n    switch (data) {\n      case \'BLEND\':\n        toy.gl.disable(toy.gl.BLEND);\n        break;\n      case \'CULL_FACE\':\n        toy.gl.disable(toy.gl.CULL_FACE);\n        break;\n      case \'DEPTH_TEST\':\n        toy.gl.disable(toy.gl.DEPTH_TEST);\n        break;\n      case \'DITHER\':\n        toy.gl.disable(toy.gl.DITHER);\n        break;\n      case \'POLYGON_OFFSET_FILL\':\n        toy.gl.disable(toy.gl.POLYGON_OFFSET_FILL);\n        break;\n      case \'SAMPLE_ALPHA_TO_COVERAGE\':\n        toy.gl.disable(toy.gl.SAMPLE_ALPHA_TO_COVERAGE);\n        break;\n      case \'SAMPLE_COVERAGE\':\n        toy.gl.disable(toy.gl.SAMPLE_COVERAGE);\n        break;\n      case \'SCISSOR_TEST\':\n        toy.gl.disable(toy.gl.SCISSOR_TEST);\n        break;\n      case \'STENCIL_TEST\':\n        toy.gl.disable(toy.gl.STENCIL_TEST);\n        break;\n    }\n  }\n\n  /*\n   * Активирует различные режимы работы конвеера отрисовки в WebGL2\n   * */\n  updatePipelineCheck(data) {\n    switch (data) {\n      case \'BLEND\':\n        toy.gl.enable(toy.gl.BLEND);\n        break;\n      case \'CULL_FACE\':\n        toy.gl.enable(toy.gl.CULL_FACE);\n        break;\n      case \'DEPTH_TEST\':\n        toy.gl.enable(toy.gl.DEPTH_TEST);\n        break;\n      case \'DITHER\':\n        toy.gl.enable(toy.gl.DITHER);\n        break;\n      case \'POLYGON_OFFSET_FILL\':\n        toy.gl.enable(toy.gl.POLYGON_OFFSET_FILL);\n        break;\n      case \'SAMPLE_ALPHA_TO_COVERAGE\':\n        toy.gl.enable(toy.gl.SAMPLE_ALPHA_TO_COVERAGE);\n        break;\n      case \'SAMPLE_COVERAGE\':\n        toy.gl.enable(toy.gl.SAMPLE_COVERAGE);\n        break;\n      case \'SCISSOR_TEST\':\n        toy.gl.enable(toy.gl.SCISSOR_TEST);\n        break;\n      case \'STENCIL_TEST\':\n        toy.gl.enable(toy.gl.STENCIL_TEST);\n        break;\n    }\n  }\n\n  /*\n   * Обновляет буфер заднего фона\n   * */\n  updateBgColor(data, field) {\n    var number = parseFloat(data);\n    switch (field) {\n      case \'r\':\n        toy.bg[0] = number;\n        break;\n      case \'g\':\n        toy.bg[1] = number;\n        break;\n      case \'b\':\n        toy.bg[2] = number;\n        break;\n      case \'a\':\n        toy.bg[3] = number;\n        break;\n    }\n  }\n  isBuiltIn(info) {\n    const name = info.name;\n    return name.startsWith("gl_") || name.startsWith("webgl_");\n  }\n  glEnum2String(value) {\n    if (typeof value != \'string\') {\n      const keys = [];\n      for (const key in this.gl) {\n        if (this.gl[key] === value) {\n          keys.push(key);\n        }\n      }\n      return keys.length ? keys.join(\' | \') : `0x${value.toString(16)}`;\n    } else {\n      return value;\n    }\n  }\n\n  // Получаем все задействованные юниформы в шейдере\n  get getUniforms() {\n    var res = [];\n    const numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n    const indices = [...Array(numUniforms).keys()];\n    const blockIndices = this.gl.getActiveUniforms(this.program, indices, this.gl.UNIFORM_BLOCK_INDEX);\n    const offsets = this.gl.getActiveUniforms(this.program, indices, this.gl.UNIFORM_OFFSET);\n    for (let ii = 0; ii < numUniforms; ++ii) {\n      const uniformInfo = this.gl.getActiveUniform(this.program, ii);\n      if (this.isBuiltIn(uniformInfo)) {\n        continue;\n      }\n      const {\n        name,\n        type,\n        size\n      } = uniformInfo;\n      if (name == \'u_time\' || name == \'u_resolution\' || name == \'u_mouse\') continue;\n      const blockIndex = blockIndices[ii];\n      const offset = offsets[ii];\n      const loc = this.gl.getUniformLocation(this.program, name);\n      res.push({\n        loc: loc,\n        name: name,\n        type: type\n      });\n    }\n    return res;\n  }\n\n  // Получаем все задействованные аттрибуты в шейдере\n  get getAttributes() {\n    var res = [];\n    const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n    for (let ii = 0; ii < numAttribs; ++ii) {\n      const {\n        name,\n        type,\n        size\n      } = this.gl.getActiveAttrib(this.program, ii);\n      const loc = this.gl.getAttribLocation(this.program, name);\n      res.push({\n        loc: loc,\n        name: name,\n        type: \'RAW_DATA\'\n      });\n    }\n    return res;\n  }\n\n  // Сохраняем данные об элементе интерфейса в памяти \n  setUIElement(ui_element) {\n    this.ui_elements.push({\n      buffer: ui_element.buffer,\n      name: ui_element.name,\n      loc: ui_element.loc,\n      size: null,\n      update: () => {},\n      handler: () => {},\n      type_data: ui_element.type\n    });\n    var id = this.ui_elements.length - 1;\n    this.ui_elements[id].id = id;\n  }\n  updateUIElement(ui_element, id) {\n    this.ui_elements[id].name = ui_element.name;\n    this.ui_elements[id].loc = ui_element.loc;\n    this.ui_elements[id].type_data = ui_element.type;\n    this.ui_elements[id].id = id;\n  }\n\n  // Очищается массив элементов интерфейса в памяти\n  // И удаляются все элементы интерфейса на странице\n  clearwebUIElements() {\n    var el_insert_to = document.getElementById("tab_body-4");\n    var children_of_insterted_el = el_insert_to.querySelectorAll(\'.mat-type\');\n    children_of_insterted_el.forEach(el => {\n      el.remove();\n    });\n  }\n  clearbuffUIElements() {\n    this.ui_elements.length = 0;\n  }\n  setcallbacksUIElement(ui_element) {\n    switch (this.glEnum2String(ui_element.type_data)) {\n      case "RAW_DATA":\n        ui_element.handler = handleRawData;\n        ui_element.update = () => {};\n        break;\n      case "FLOAT":\n        ui_element.handler = handleFloat;\n        ui_element.update = function () {\n          toy.gl.uniform1f(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "BOOL":\n        ui_element.handler = handleBool;\n        ui_element.update = function () {\n          toy.gl.uniform1i(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "INT":\n        ui_element.handler = handleInt;\n        ui_element.update = function () {\n          toy.gl.uniform1i(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "FLOAT_VEC2":\n        ui_element.handler = handleFloatVector;\n        ui_element.update = function () {\n          toy.gl.uniform2fv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "FLOAT_VEC3":\n        ui_element.handler = handleFloatVector;\n        ui_element.update = function () {\n          toy.gl.uniform3fv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "FLOAT_VEC4":\n        ui_element.handler = handleFloatVector;\n        ui_element.update = function () {\n          toy.gl.uniform4fv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "BOOL_VEC2":\n        ui_element.handler = handleBoolVector;\n        ui_element.update = function () {\n          toy.gl.uniform2iv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "BOOL_VEC3":\n        ui_element.handler = handleBoolVector;\n        ui_element.update = function () {\n          toy.gl.uniform3iv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "BOOL_VEC4":\n        ui_element.handler = handleBoolVector;\n        ui_element.update = function () {\n          toy.gl.uniform4iv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "INT_VEC2":\n        ui_element.handler = handleIntVector;\n        ui_element.update = function () {\n          toy.gl.uniform2iv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "INT_VEC3":\n        ui_element.handler = handleIntVector;\n        ui_element.update = function () {\n          toy.gl.uniform3iv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "INT_VEC4":\n        ui_element.handler = handleIntVector;\n        ui_element.update = function () {\n          toy.gl.uniform4iv(ui_element.loc, ui_element.buffer);\n        };\n        break;\n      case "FLOAT_MAT2":\n        ui_element.handler = handleMatrix;\n        ui_element.update = function () {\n          toy.gl.uniformMatrix2fv(ui_element.loc, false, ui_element.buffer);\n        };\n        break;\n      case "FLOAT_MAT3":\n        ui_element.handler = handleMatrix;\n        ui_element.update = function () {\n          toy.gl.uniformMatrix3fv(ui_element.loc, false, ui_element.buffer);\n        };\n        break;\n      case "FLOAT_MAT4":\n        ui_element.handler = handleMatrix;\n        ui_element.update = function () {\n          toy.gl.uniformMatrix4fv(ui_element.loc, false, ui_element.buffer);\n        };\n        break;\n    }\n  }\n  setwebUIElement(ui_element) {\n    var fragment = \'\';\n    switch (this.glEnum2String(ui_element.type_data)) {\n      case "RAW_DATA":\n        // Set up checked radio button\n        // if current active index is eaqual to index of ui_element\n        var isForGeometry = null;\n        if (ui_element.id == this.default_geometry_data_indx) var isForGeometry = \'checked\';else var isForGeometry = \'\';\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | RAW_DATA\t\n\t</legend>\n\t<div class="input_data column min_row_gap">\n\t\t<div class="row min_col_gap no_wrap">\n\t\t\t<p>step</p>\n\t\t\t<input data-ui-element-id="${ui_element.id}" class="input_el" value="${ui_element.size}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t</div>\n\t\t<div class="row min_col_gap no_wrap">\n\t\t\t<p>is for geometry</p>\n\t\t\t<input data-ui-element-id="${ui_element.id}" class="input_el" value="${ui_element.id}" type="radio" name="geometry" ${isForGeometry}/>\n\t\t</div>\n\t\t<hr>\n\t\t<textarea data-ui-element-id="${ui_element.id}" class="input_el" name="about" id="">\n${ui_element.buffer}\n\t\t</textarea>\n\t</div>\n</fieldset>`;\n        break;\n      case "FLOAT":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | FLOAT\n\t</legend>\n\t<input data-ui-element-id="${ui_element.id}" class="input_el" value="${ui_element.buffer}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n</fieldset>`;\n        break;\n      case "BOOL":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | BOOL \n\t</legend>\n\t<input data-ui-element-id="${ui_element.id}" class="input_el" value="${ui_element.buffer}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n</fieldset>`;\n        break;\n      case "INT":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | INT\n\t</legend>\n\t<input data-ui-element-id="${ui_element.id}" class="input_el" value="${ui_element.buffer}" type="number" id="tentacles" name="tentacles" step="1"/>\n</fieldset>`;\n        break;\n      case "FLOAT_VEC2":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | FLOAT VECTOR_2\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "FLOAT_VEC3":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | FLOAT VECTOR_3\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "FLOAT_VEC4":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | FLOAT VECTOR_4\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="3" class="input_el" value="${ui_element.buffer[3]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "BOOL_VEC2":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | BOOL VECTOR_2\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "BOOL_VEC3":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | BOOL VECTOR_3\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "BOOL_VEC4":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | BOOL VECTOR_4\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="3" class="input_el" value="${ui_element.buffer[3]}" min="0" max="1" type="number" id="tentacles" name="tentacles" step="1"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "INT_VEC2":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | INT VECTOR_2\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "INT_VEC3":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | INT VECTOR_3\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "INT_VEC4":\n        fragment = `<fieldset class="mat-type">\n\t<legend>\n\t\t${ui_element.name} | INT VECTOR_4\n\t</legend>\n\t<div class="input_vector">\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="3" class="input_el" value="${ui_element.buffer[3]}" type="number" id="tentacles" name="tentacles" step="1"/>\n\t</div>\n</fieldset>`;\n        break;\n      case "FLOAT_MAT2":\n        fragment = `<fieldset class="mat-type">\n\t\t\t\t\t\t<legend>\n\t\t\t\t\t\t\t${ui_element.name} | MATRIX_2x2\n\t\t\t\t\t\t</legend>\n\t\t\t\t\t\t<div class="input_matrix">\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="3" class="input_el" value="${ui_element.buffer[3]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>`;\n        break;\n      case "FLOAT_MAT3":\n        fragment = `<fieldset class="mat-type">\n\t\t\t\t\t\t<legend>\n\t\t\t\t\t\t\t${ui_element.name} | MATRIX_3x3\n\t\t\t\t\t\t</legend>\n\t\t\t\t\t\t<div class="input_matrix">\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="3" class="input_el" value="${ui_element.buffer[3]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="4" class="input_el" value="${ui_element.buffer[4]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="5" class="input_el" value="${ui_element.buffer[5]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="6" class="input_el" value="${ui_element.buffer[6]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="7" class="input_el" value="${ui_element.buffer[7]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="8" class="input_el" value="${ui_element.buffer[8]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>`;\n        break;\n      case "FLOAT_MAT4":\n        fragment = `<fieldset class="mat-type">\n\t\t\t\t\t\t<legend>\n\t\t\t\t\t\t\t${ui_element.name} | MATRIX_4x4\n\t\t\t\t\t\t</legend>\n\t\t\t\t\t\t<div class="input_matrix">\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="0" class="input_el" value="${ui_element.buffer[0]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="1" class="input_el" value="${ui_element.buffer[1]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="2" class="input_el" value="${ui_element.buffer[2]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="3" class="input_el" value="${ui_element.buffer[3]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="4" class="input_el" value="${ui_element.buffer[4]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="5" class="input_el" value="${ui_element.buffer[5]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="6" class="input_el" value="${ui_element.buffer[6]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="7" class="input_el" value="${ui_element.buffer[7]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="8" class="input_el" value="${ui_element.buffer[8]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="9" class="input_el" value="${ui_element.buffer[9]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="10" class="input_el" value="${ui_element.buffer[10]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="11" class="input_el" value="${ui_element.buffer[11]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="input_vector">\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="12" class="input_el" value="${ui_element.buffer[12]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="13" class="input_el" value="${ui_element.buffer[13]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="14" class="input_el" value="${ui_element.buffer[14]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t\t<input data-ui-element-id="${ui_element.id}" data-vec-indx="15" class="input_el" value="${ui_element.buffer[15]}" type="number" id="tentacles" name="tentacles" step="0.01"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>`;\n        break;\n    }\n    var el_insert_to = document.getElementById("tab_body-4");\n    el_insert_to.insertAdjacentHTML(\'beforeend\', fragment);\n  }\n  setbufferUIElement(ui_element, type) {\n    var type_to_choose = type || this.glEnum2String(ui_element.type_data);\n    switch (type_to_choose) {\n      case "RAW_DATA":\n        ui_element.buffer = new Float32Array([-1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, -1.0]);\n        // Число элементов для одной вершины в буфере\n        ui_element.size = 2;\n        break;\n      case "FLOAT":\n        ui_element.buffer = 1.0;\n        break;\n      case "BOOL":\n        ui_element.buffer = true;\n        break;\n      case "INT":\n        ui_element.buffer = 1;\n        break;\n      case "FLOAT_VEC2":\n        ui_element.buffer = [1.0, 1.0];\n        break;\n      case "FLOAT_VEC3":\n        ui_element.buffer = [1.0, 1.0, 1.0];\n        break;\n      case "FLOAT_VEC4":\n        ui_element.buffer = [1.0, 1.0, 1.0, 1.0];\n        break;\n      case "BOOL_VEC2":\n        ui_element.buffer = [0, 0];\n        break;\n      case "BOOL_VEC3":\n        ui_element.buffer = [0, 0, 0];\n        break;\n      case "BOOL_VEC4":\n        ui_element.buffer = [0, 0, 0, 0];\n        break;\n      case "INT_VEC2":\n        ui_element.buffer = [1, 1];\n        break;\n      case "INT_VEC3":\n        ui_element.buffer = [1, 1, 1];\n        break;\n      case "INT_VEC4":\n        ui_element.buffer = [1, 1, 1, 1];\n        break;\n      case "FLOAT_MAT2":\n        ui_element.buffer = [1.0, 0.0, 0.0, 1.0];\n        break;\n      case "FLOAT_MAT3":\n        ui_element.buffer = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];\n        break;\n      case "FLOAT_MAT4":\n        ui_element.buffer = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];\n        break;\n    }\n  }\n\n  /*\n   *\tКомпилируем шейдерную программу\n   * */\n  createProgram(gl, vertexShader, fragmentShader) {\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n      return program;\n    }\n    this.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n  }\n\n  /*\n   *\tСоздаём шейдер из исходника\n   * */\n  createShader(gl, type, source) {\n    var shader = gl.createShader(type); // создание шейдера\n    gl.shaderSource(shader, source); // устанавливаем шейдеру его программный код\n    gl.compileShader(shader); // компилируем шейдер\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n      // если компиляция прошла успешно - возвращаем шейдер\n      return shader;\n    }\n    this.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n  }\n\n  /* \n   * Читаем содержимое файла и возвращаем его как одну строку\n   * */\n  readTextFile(file) {\n    var rawFile = new XMLHttpRequest();\n    var result = "";\n    rawFile.open("GET", file, false);\n    rawFile.onreadystatechange = function () {\n      if (rawFile.readyState === 4) {\n        if (rawFile.status === 200 || rawFile.status == 0) {\n          result = rawFile.responseText;\n        }\n      }\n    };\n    rawFile.send(null);\n    return result;\n  }\n\n  /*\n   *\tЗаписывает ошибки в отдельный таб на странице\n   * */\n  log(msg) {\n    var tab_button = document.getElementById("tab_button_for_err");\n    tab_button.style.display = "flex";\n    var container_to_paste = document.getElementById("tab_body-7");\n    var element = `\\n<div class="logs_and_erros">${msg}</div>`;\n    container_to_paste.insertAdjacentHTML(\'beforeend\', element);\n  }\n\n  /*\n   *\tУдаляет все записи в табе об ошибках\n   * */\n  clearLog() {\n    var tab_button = document.getElementById("tab_button_for_err");\n    tab_button.style.display = "none";\n    var container_to_paste = document.getElementById("tab_body-7");\n    container_to_paste.innerHTML = \'\';\n  }\n\n  /*\n   *\tОбновляем время, юниформы(которые по-умолчанию тоже), viewport,\n   *\tшейдерную программу.\n   *\tИ после отрисовкии делаем запрос следующего фрейма\n   * */\n  update(time, inst) {\n    time *= 0.001;\n    inst.deltaTime = time - inst.start;\n    inst.start = time;\n    resizeCanvasToDisplaySize(inst.canvas);\n    // Tell WebGL how to convert from clip space to pixels\n    inst.gl.viewport(0, 0, inst.gl.canvas.width, inst.gl.canvas.height);\n\n    // Clear the canvas\n    inst.gl.clearColor(inst.bg[0], inst.bg[1], inst.bg[2], inst.bg[3]);\n    inst.gl.clear(inst.gl.COLOR_BUFFER_BIT | inst.gl.DEPTH_BUFFER_BIT);\n    inst.gl.useProgram(inst.program);\n    inst.gl.bindVertexArray(inst.vao);\n    for (var i = 0; i < inst.ui_elements.length; i++) {\n      inst.ui_elements[i].update();\n    }\n    inst.gl.uniform1f(inst.uTimeLoc, time);\n    inst.gl.uniform2fv(inst.uResolutionLoc, [inst.gl.canvas.width, inst.gl.canvas.height]);\n    inst.gl.uniform2fv(inst.uMousePosLoc, inst.mouse_pos);\n    inst.draw(time);\n    inst.request_animation_id = window.requestAnimationFrame(time => this.update(time, inst));\n  }\n\n  /*\n   *\tПроизводим отрисовку буфера\n   * */\n  draw(time) {\n    var primitiveType = this.render_mode;\n    var offset = 0;\n    var count = this.ui_elements[this.default_geometry_data_indx].buffer.length / this.ui_elements[this.default_geometry_data_indx].size;\n    this.gl.drawArrays(primitiveType, offset, count);\n  }\n\n  /*\n   *\tЗапрашивает первый фрейм для начала рендеринга\n   * */\n  run() {\n    this.request_animation_id = window.requestAnimationFrame(time => this.update(time, this));\n  }\n}\nlet toy = new ShaderToy();\ntoy.run();\n\n//# sourceURL=webpack://shader-toy/./static/ShaderToy/js/shader_toy.js?\n}')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./static/ShaderToy/js/index.js")})();