"""
Django settings for Website project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from django.utils.translation import gettext_lazy as _
from pathlib import Path
import os
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read the settings file
with open(os.path.join(BASE_DIR,"settings.json"), 'r') as settings_file:
    settings = json.load(settings_file)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = settings['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = settings['DEBUG']

ALLOWED_HOSTS = settings['ALLOWED_HOSTS']


# Application definition

INSTALLED_APPS = [
    # model translation
    'modeltranslation',
    ###
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    # captcha
    'captcha',
    # Django REST framework
    'corsheaders',
    'rest_framework',
    # Django-Cleanup
    'django_cleanup.apps.CleanupConfig',
]

MY_INSTALLED_APPS = [
    'Main.apps.MainConfig',
    'Post.apps.PostConfig',
    'PagiScroll.apps.PagiscrollConfig',
    'Engagement.apps.EngagementConfig',
    'Breadcrumbs.apps.BreadcrumbsConfig',
    'Affiliate.apps.AffiliateConfig',
    'Apps.ImageThief.apps.ImagethiefConfig',
    'Apps.RSSAggregator.apps.RssaggregatorConfig',
    'Apps.ShaderToy.apps.ShadertoyConfig',
    'Apps.LinkThief.apps.LinkthiefConfig',
    'Apps.TextThief.apps.TextthiefConfig',
    'Apps.WYSIWYGEditor.apps.WYSIWYGEditorConfig'
]

INSTALLED_APPS += MY_INSTALLED_APPS

MIDDLEWARE = [
    'Engagement.middleware.EngagementMiddleware',
    'Breadcrumbs.middleware.BreadcrumbsMiddleware',
    'Post.middleware.ToolMiddleware',
    'Affiliate.middleware.AffiliateMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # REST framework
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'Website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'media/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'Website.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = settings['DATABASES']

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

CSRF_USE_SESSIONS = True
SESSION_SAVE_EVERY_REQUEST = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


LANGUAGES = [
        ("ru", _("Русский")),
        ("en", _("Английский")),
]
MODELTRANSLATION_DEFAULT_LANGUAGE = "ru"


# For email sending 
DEFAULT_FROM_EMAIL = settings['DEFAULT_FROM_EMAIL']
DEFAULT_TO_EMAIL = settings['DEFAULT_TO_EMAIL']
EMAIL_HOST = settings['EMAIL_HOST']
EMAIL_PORT = settings['EMAIL_PORT']
EMAIL_HOST_USER = settings['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = settings['EMAIL_HOST_PASSWORD']

if not DEBUG:
    REST_FRAMEWORK = {
        # Need to be specified explicitly, otherwise for everyone will be available HTML version of REST framework
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
        ],
    }
