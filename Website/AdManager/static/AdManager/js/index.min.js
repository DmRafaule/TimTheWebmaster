/*! For license information please see index.min.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./static/AdManager/js/admanager.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adLoad: () => (/* binding */ adLoad)\n/* harmony export */ });\nfunction adLoad() {\n  let onAdUploaded = new CustomEvent(\'onAdUploaded\');\n  function pushAd(ad_block_id, render_to_id) {\n    if (render_to_id) {\n      render_to_id = `_${render_to_id}`;\n    } else {\n      render_to_id = \'\';\n    }\n    window.yaContextCb.push(() => {\n      Ya.Context.AdvManager.render({\n        "blockId": ad_block_id,\n        "renderTo": `ad_block_${ad_block_id}${render_to_id}`\n      });\n    });\n  }\n  function onNodeAppear(ad_block) {\n    var ad_block_id = ad_block.dataset.adId;\n    var ad_block_page_id = ad_block.dataset.adPage;\n    pushAd(ad_block_id, ad_block_page_id);\n  }\n  function WaitAdToUpload(adBlock) {\n    var options = {\n      threshold: 0\n    };\n    var adBlock_observer = new IntersectionObserver((entries, observer) => {\n      // Loop through the entries\n      for (const entry of entries) {\n        // Check if the entry is intersecting the viewport\n        if (entry.isIntersecting) {}\n      }\n    }, options);\n    adBlock_observer.observe(adBlock);\n  }\n\n  // Callback function to execute when mutations are observed\n  function WaitAdToAppear(mutationList, observer) {\n    for (const mutation of mutationList) {\n      mutation.addedNodes.forEach(node => {\n        if (node.nodeType === 1 && node.classList.contains("ad_block")) {\n          document.dispatchEvent(onAdUploaded);\n          var ad_block = node.querySelector(\'.ad_block_element\');\n          onNodeAppear(ad_block);\n        }\n      });\n    }\n  }\n  ;\n  const observedElement = document.querySelector("body");\n  const config = {\n    childList: true,\n    subtree: true\n  };\n  const observer = new MutationObserver(WaitAdToAppear);\n  observer.observe(observedElement, config);\n  const adBlocks = document.querySelectorAll(".ad_block_element");\n  adBlocks.forEach(adBlock => {\n    onNodeAppear(adBlock);\n  });\n}\n\n//# sourceURL=webpack://admanager/./static/AdManager/js/admanager.js?\n}')},"./static/AdManager/js/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _admanager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./admanager.js */ "./static/AdManager/js/admanager.js");\n\nif (document.readyState === "loading") {\n  document.addEventListener("DOMContentLoaded", _admanager_js__WEBPACK_IMPORTED_MODULE_0__.adLoad);\n} else {\n  (0,_admanager_js__WEBPACK_IMPORTED_MODULE_0__.adLoad)();\n}\n\n//# sourceURL=webpack://admanager/./static/AdManager/js/index.js?\n}')}},__webpack_module_cache__={};function __webpack_require__(e){var _=__webpack_module_cache__[e];if(void 0!==_)return _.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,_)=>{for(var n in _)__webpack_require__.o(_,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:_[n]})},__webpack_require__.o=(e,_)=>Object.prototype.hasOwnProperty.call(e,_),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./static/AdManager/js/index.js")})();